#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<cmath>
#include<cstdlib>
#define yes cout << "YES\n"
#define no cout << "NO\n"
#define fa(i, n) for (ll i = 0; i < n; i++)
#define fd(i, n) for (ll i = n-1; i>=0; i--)
#define pb push_back
using namespace std;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vll;
const ll mod = 1000000007;
vector <bool> prime;
void seive()
{
	prime.resize(1000000001, true);
    for (int p = 2; p * p <= 1000000001; p++)
		if (prime[p] == true) 
			for (int i = p * p; i <= 1000000001; i += p)
				prime[i] = false;
	prime[0] = false;
	prime[1] = false;
}
long long inv(long long base, long long exp, long long mod)
{
	base %= mod;
	long long result = 1;
	while (exp > 0)
	{
		if (exp % 2 == 1)
			result = (result * base) % mod;
		base = (base * base) % mod;
		exp = exp / 2;
	}
	return result;
}
void solve()
{
//For 1500 problems ,they are mostly of type
//1)Problem can divided into normal problem and additional constraint with small sample space , here we brute force
//2)Dp
//3)Constructive algo where we do greedy
//4)When we have to minimize,maximize something but cant find the algo which will do it, but for a given value we can find if its possible or not, we do binary search
//5)When we have to check a lot of cases, if "case x is possible , it would satisfy case y" also , hence cases to check would reduce
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int t = 1;
	cin >> t;
	while (t--)
		solve();
}
